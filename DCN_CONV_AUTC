import React, { useState, useEffect } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';

const seismicWave = (amplitude, frequency, phase, time) => {
  return time.map((t) => amplitude * Math.sin(2 * Math.PI * frequency * t + phase));
};

const convolution = (wave1, wave2) => {
  const result = new Array(wave1.length + wave2.length - 1).fill(0);
  for (let i = 0; i < wave1.length; i++) {
    for (let j = 0; j < wave2.length; j++) {
      result[i + j] += wave1[i] * wave2[j];
    }
  }
  return result;
};

const deconvolution = (wave1, wave2) => {
  const result = new Array(wave1.length - wave2.length + 1).fill(0);
  for (let i = 0; i < result.length; i++) {
    for (let j = 0; j < wave2.length; j++) {
      result[i] += wave1[i + j] * wave2[wave2.length - 1 - j];
    }
  }
  return result;
};

const autocorrelation = (wave, lag = 0) => {
  const result = new Array(wave.length).fill(0);
  for (let i = 0; i < wave.length; i++) {
    for (let j = 0; j < wave.length - lag; j++) {
      result[i] += wave[j] * wave[(j + i + lag) % wave.length];
    }
  }
  return result;
};

const App = () => {
  const [amplitude, setAmplitude] = useState(1);
  const [frequency, setFrequency] = useState(1);
  const [phase, setPhase] = useState(0);
  const [time] = useState(Array.from({ length: 100 }, (_, i) => i / 100));

  const [wave, setWave] = useState([]);
  const [convolutionWave, setConvolutionWave] = useState([]);
  const [deconvolutionResult, setDeconvolutionResult] = useState([]);
  const [autocorrelationResult, setAutocorrelationResult] = useState([]);
  const [convolutionAmplitude, setConvolutionAmplitude] = useState(0.5);
  const [deconvolutionAmplitude, setDeconvolutionAmplitude] = useState(0.5);
  const [autocorrelationLag, setAutocorrelationLag] = useState(0);

  useEffect(() => {
    const newWave = seismicWave(amplitude, frequency, phase, time);
    setWave(newWave);

    const newConvolutionWave = seismicWave(convolutionAmplitude, frequency, phase, time);
    const convolvedWave = convolution(newWave, newConvolutionWave);
    setConvolutionWave(convolvedWave);

    const newDeconvolutionWave = seismicWave(deconvolutionAmplitude, frequency, phase, time);
    const deconvolvedWave = deconvolution(convolvedWave, newDeconvolutionWave);
    setDeconvolutionResult(deconvolvedWave);

    const autocorrelatedWave = autocorrelation(newWave, autocorrelationLag);
    setAutocorrelationResult(autocorrelatedWave);
  }, [amplitude, frequency, phase, convolutionAmplitude, deconvolutionAmplitude, autocorrelationLag, time]);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-4">Seismic Wave Processing</h1>
      <div className="flex flex-wrap justify-center mb-4">
        <div className="w-full md:w-1/2 xl:w-1/3 p-4">
          <h2 className="text-xl font-bold mb-2">Original Wave</h2>
          <LineChart width={300} height={200} data={wave.map((value, index) => ({ value, index }))}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="index" />
            <YAxis />
            <Tooltip />
            <Legend />
            <Line type="monotone" dataKey="value" stroke="#8884d8" />
          </LineChart>
          <div className="flex flex-col items-center mt-2">
            <label className="mr-2">Amplitude:</label>
            <input type="range" min={0} max={2} step={0.1} value={amplitude} onChange={(e) => setAmplitude(Number(e.target.value))} />
            <label className="ml-2">{amplitude}</label>
          </div>
          <div className="flex flex-col items-center mt-2">
            <label className="mr-2">Frequency:</label>
            <input type="range" min={0} max={2} step={0.1} value={frequency} onChange={(e) => setFrequency(Number(e.target.value))} />
            <label className="ml-2">{frequency}</label>
          </div>
          <div className="flex flex-col items-center mt-2">
            <label className="mr-2">Phase:</label>
            <input type="range" min={0} max={Math.PI * 2} step={0.1} value={phase} onChange={(e) => setPhase(Number(e.target.value))} />
            <label className="ml-2">{phase.toFixed(2)}</label>
          </div>
        </div>
        <div className="w-full md:w-1/2 xl:w-1/3 p-4">
          <h2 className="text-xl font-bold mb-2">Convolution</h2>
          <LineChart width={300} height={200} data={convolutionWave.map((value, index) => ({ value, index }))}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="index" />
            <YAxis />
            <Tooltip />
            <Legend />
            <Line type="monotone" dataKey="value" stroke="#8884d8" />
          </LineChart>
          <div className="flex flex-col items-center mt-2">
            <label className="mr-2">Amplitude:</label>
            <input type="range" min={0} max={2} step={0.1} value={convolutionAmplitude} onChange={(e) => setConvolutionAmplitude(Number(e.target.value))} />
            <label className="ml-2">{convolutionAmplitude}</label>
          </div>
          <p className="text-sm">Convolution is the process of combining two waves to produce a new wave. Higher amplitudes enhance the combined effect.</p>
          <div className="text-sm mt-2">
            <p>Convolution Steps:</p>
            <p>1. Reverse the second wavelet.</p>
            <p>2. Slide it across the first wavelet.</p>
            <p>3. Multiply overlapping samples and sum them up to get the new sample.</p>
          </div>
        </div>
        <div className="w-full md:w-1/2 xl:w-1/3 p-4">
          <h2 className="text-xl font-bold mb-2">Deconvolution</h2>
          <LineChart width={300} height={200} data={deconvolutionResult.map((value, index) => ({ value, index }))}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="index" />
            <YAxis />
            <Tooltip />
            <Legend />
            <Line type="monotone" dataKey="value" stroke="#8884d8" />
          </LineChart>
          <div className="flex flex-col items-center mt-2">
            <label className="mr-2">Amplitude:</label>
            <input type="range" min={0} max={2} step={0.1} value={deconvolutionAmplitude} onChange={(e) => setDeconvolutionAmplitude(Number(e.target.value))} />
            <label className="ml-2">{deconvolutionAmplitude}</label>
          </div>
          <p className="text-sm">Deconvolution is the process of removing the effects of one wave from another wave. Higher amplitudes enhance the deconvolution effect.</p>
          <div className="text-sm mt-2">
            <p>Deconvolution Steps:</p>
            <p>1. Reverse the second wavelet.</p>
            <p>2. Slide it across the convolved wavelet.</p>
            <p>3. Multiply overlapping samples and sum them up to get the new sample.</p>
          </div>
        </div>
        <div className="w-full md:w-1/2 xl:w-1/3 p-4">
          <h2 className="text-xl font-bold mb-2">Autocorrelation</h2>
          <LineChart width={300} height={200} data={autocorrelationResult.map((value, index) => ({ value, index }))}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="index" />
            <YAxis />
            <Tooltip />
            <Legend />
            <Line type="monotone" dataKey="value" stroke="#8884d8" />
          </LineChart>
          <div className="flex flex-col items-center mt-2">
            <label className="mr-2">Lag:</label>
            <input type="range" min={0} max={wave.length - 1} step={1} value={autocorrelationLag} onChange={(e) => setAutocorrelationLag(Number(e.target.value))} />
            <label className="ml-2">{autocorrelationLag}</label>
          </div>
          <p className="text-sm">Autocorrelation measures the similarity between a wave and a time-shifted version of itself. Lag defines the time shift, with 0 meaning no shift.</p>
          <div className="text-sm mt-2">
            <p>Autocorrelation Steps:</p>
            <p>1. Select a lag value.</p>
            <p>2. Slide the wave along itself by the lag value.</p>
            <p>3. Multiply overlapping samples and sum them up to get the new sample.</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;
